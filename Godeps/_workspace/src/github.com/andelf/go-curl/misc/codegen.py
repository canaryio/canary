#!/usr/bin/env python2
# -*- coding: utf-8 -*-

import re



opts = []
codes = []
infos = []
pattern = re.compile(r'CINIT\((.*?),\s+(LONG|OBJECTPOINT|FUNCTIONPOINT|OFF_T),\s+(\d+)\)')
pattern2 = re.compile('^\s+(CURLE_[A-Z_0-9]+),')
pattern3 = re.compile('^\s+(CURLINFO_[A-Z_0-9]+)\s+=')
for line in open("./curl/include/curl/curl.h"):
    match = pattern.findall(line)
    if match:
        opts.append(match[0][0])
    if line.startswith('#define CURLOPT_'):
        o = line.split()
        opts.append(o[1][8:])   # strip :(

    match = pattern2.findall(line)
    if match:
        codes.append(match[0])

    if line.startswith('#define CURLE_'):
        c = line.split()
        codes.append(c[1])

    match = pattern3.findall(line)
    if match:
        infos.append(match[0])

    if line.startswith('#define CURLINFO_'):
        i = line.split()
        if '0x' not in i[2]:    # :(
            infos.append(i[1])


template = """
// generated by codegen.py

package curl
/*
#include <curl/curl.h>
#include "compat.h"
*/
import "C"

// CURLcode
const (
{code_part}
)

// easy.Setopt(flag, ...)
const (
{opt_part}
)

// easy.Getinfo(flag)
const (
{info_part}
)

// generated ends
"""

code_part = []
for c in codes:
    code_part.append("\t{:<25} = C.{}".format(c[4:], c))

code_part = '\n'.join(code_part)

opt_part = []
for o in opts:
    opt_part.append("\tOPT_{0:<25} = C.CURLOPT_{0}".format(o))

opt_part = '\n'.join(opt_part)

info_part = []
for i in infos:
    info_part.append("\t{:<25} = C.{}".format(i[4:], i))

info_part = '\n'.join(info_part)


with open('./const_gen.go', 'w') as fp:
    fp.write(template.format(**locals()))
